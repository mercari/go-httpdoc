// Code generated by go-bindata.
// sources:
// tmpl/doc.md.tmpl
// DO NOT EDIT!

package httpdoc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDocMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xc1\x8e\x13\x31\x0c\xbd\xe7\x2b\x9e\x94\x03\x70\xe8\x7c\x00\x37\xc4\x2e\x82\x03\xa8\x5a\x56\x5c\x56\x48\x93\x6d\xdc\x9d\x48\xd3\x64\x48\x5c\x01\xea\xe4\xdf\x51\x92\x0e\x24\x2a\xbd\xc0\xce\x9c\xec\x17\xdb\xcf\xcf\xf6\x48\xbc\xd9\x7e\x80\x76\x3b\x21\xee\x07\x13\x60\xc2\x02\x1c\x0f\x64\x59\xb1\x71\x16\x7b\xe7\x71\x3a\xa1\xfb\xa4\x0e\x84\x18\x3b\x2c\xa1\x4f\x64\xc9\x2b\x26\x8d\xc7\x9f\xe8\x07\xe6\x49\xbb\x5d\xdf\xe1\xc6\xd9\x17\x0c\xd2\x86\xd3\xc3\xa0\xac\xee\x84\x90\x12\xf7\xea\x71\x24\xb8\x3d\x76\xce\x32\x59\x0e\x42\x9c\x4e\xf0\xca\x3e\x11\xba\x5b\xcb\xde\x50\xc0\x26\x46\xb1\xc1\xc3\x43\x62\xbc\xa3\x30\x39\x1b\xe8\x33\x2b\x3e\x86\xb7\x4e\x27\xfe\xaf\xb9\x99\x8f\xc4\x83\xd3\x88\x31\x7b\x5b\xc5\x43\x7a\x7a\x29\xaf\xa6\x6d\xaa\xac\x19\xa3\xfb\x4e\x7e\x41\x73\xf6\x8c\xc0\xde\x4c\x61\x54\x61\xa8\x02\x5e\xa5\x16\xc9\x26\xa6\x6b\xdd\x4a\x89\x7f\xea\x36\xd7\xeb\x6e\x28\xec\xbc\x99\xf2\xa4\x13\x26\xa5\xc4\x1d\x7d\x3b\x52\xe0\x1c\x60\xf6\xa9\x72\xf6\xb7\xca\xab\x43\xe1\xcc\x26\x31\xf9\x20\xc4\x8c\xbc\x19\xcc\xf8\xa2\xc6\x63\x36\xea\xa2\xb3\x98\xb1\x49\x1f\x66\xbc\x6e\x8d\xe2\x54\xb2\x2e\x89\xe6\x7a\xf5\x28\x5e\xa1\xf9\xed\xb6\x0a\x4a\xbd\x32\xb1\x76\x74\x95\x92\xf7\xa4\x34\xf9\xc2\x70\xb6\xd7\xd0\x51\xd3\xfc\x97\x10\x71\x55\xc9\x3b\x43\xa3\x2e\x0c\x67\x04\xfb\x0c\xad\xa1\xa7\x22\x5b\x49\xce\xed\x0f\x75\x98\x46\x6a\xf4\x50\xc1\x84\xe8\xfb\x5e\x94\x43\x6f\x62\x63\x5c\x5e\x96\x9a\xe5\x86\xcb\xdf\x50\x31\x14\x60\xfd\xdd\x5f\xf2\x3c\xff\xb4\x0a\x47\xb3\xfd\x02\xad\xb3\xfe\x0b\xba\xb5\x14\xb5\x07\x70\x96\xf4\x97\x0b\x68\xa3\x2f\x4e\xe0\x8f\xf5\x2b\x00\x00\xff\xff\xc1\x08\x3c\x09\x63\x06\x00\x00")

func tmplDocMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDocMdTmpl,
		"tmpl/doc.md.tmpl",
	)
}

func tmplDocMdTmpl() (*asset, error) {
	bytes, err := tmplDocMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/doc.md.tmpl", size: 1635, mode: os.FileMode(420), modTime: time.Unix(1496080993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/doc.md.tmpl": tmplDocMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"doc.md.tmpl": &bintree{tmplDocMdTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

